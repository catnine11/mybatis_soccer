--특정일을 입력하면 그 날 경기한 팀의 이름과 결과를 출력한다 sel_sch

SELECT T1.TEAM_NAME AS HOME_TEAM,
		T2.TEAM_NAME AS AWAY_TEAM,
		S.HOME_SCORE,
		S.AWAY_SCORE
	FROM SCHEDULE S
		INNER JOIN TEAM T1 ON S.HOMETEAM_ID = T1.TEAM_ID
		INNER JOIN TEAM T2 ON S.AWAYTEAM_ID = T2.TEAM_ID
WHERE S.SCHE_DATE = '20120818'
ORDER BY T1.TEAM_NAME ASC, T2.TEAM_NAME;

--각 팀별 가장 오래 활동한 선수의 이름과 닉네임, 기간을 출력한다(닉네임없으면 없음으로, 활동기간 NULL이면 안 뜨게) sel_period

SELECT PLAYER_NAME,
		TEAM_NAME,
		PERIOD,
		NICKNAME
	FROM (SELECT
			P.PLAYER_NAME,
			T.TEAM_NAME,
			COALESCE(EXTRACT(YEAR FROM SYSDATE) - TO_NUMBER(SUBSTR(P.JOIN_YYYY, 1, 4)), 0) AS PERIOD,
			COALESCE(P.NICKNAME, '없음') AS NICKNAME,
			ROW_NUMBER() OVER (PARTITION BY T.TEAM_NAME ORDER BY P.JOIN_YYYY ASC) AS RN
		FROM PLAYER P
			INNER JOIN TEAM T ON P.TEAM_ID = T.TEAM_ID)
WHERE RN = 1
	AND PERIOD>0;


--각 팀별 가장 오래 활동한 선수의 닉네임을 입력한다(0년차) insert_nickname






--원정팀일 때 승률이 가장 높은 팀이 출력된다 sel_awayhigh

SELECT TEAM_NAME , win_ratio
	FROM (SELECT T.TEAM_NAME,
				SUM(CASE WHEN S.AWAYTEAM_ID = T.TEAM_ID AND S.AWAY_SCORE > S.HOME_SCORE 
							THEN 1 ELSE 0 END) AS WIN_COUNT,
				COUNT(*) AS GAME_COUNT,
				ROUND(SUM(CASE WHEN S.AWAYTEAM_ID = T.TEAM_ID AND S.AWAY_SCORE > S.HOME_SCORE
							THEN 1 ELSE 0 END) / COUNT(*) * 100, 2) AS WIN_RATIO,
				ROW_NUMBER() OVER (ORDER BY SUM
						(CASE WHEN S.AWAYTEAM_ID = T.TEAM_ID AND S.AWAY_SCORE > S.HOME_SCORE 
								THEN 1 ELSE 0 END) / COUNT(*) DESC) AS RN
			FROM SCHEDULE S
	JOIN TEAM T ON S.AWAYTEAM_ID = T.TEAM_ID
	GROUP BY T.TEAM_NAME
	HAVING COUNT(*) > 0
	ORDER BY WIN_RATIO DESC)
WHERE RN = 1;


--특정 등번호를 입력하면 각 팀 별 등번호를 가진 선수의 이름과 팀이름, 포지션이 출력된다 sel_backno

SELECT PLAYER_NAME, TEAM_NAME, "POSITION"
	FROM TEAM t
	JOIN PLAYER p ON t.TEAM_ID = p.TEAM_ID
WHERE p.BACK_NO = '24';


--팀별 인원을 확인하는 테이블에서 선수의 이적 결과에 따라 팀별 인원이 변동된다.

DROP TABLE TEAM_MEMBER_COUNT;

CREATE TABLE TEAM_MEMBER_COUNT(
	TEAM_ID CHAR(3) PRIMARY KEY,
	TEAM_NAME VARCHAR2(40) NOT NULL,
	REGION_NAME VARCHAR2(8),
	MEMBER_COUNT NUMBER
);

SELECT P.TEAM_ID ,T.TEAM_NAME, COUNT(*) AS PLAYER_COUNT
	FROM PLAYER P
	JOIN TEAM T ON P.TEAM_ID = T.TEAM_ID
	GROUP BY P.TEAM_ID , T.TEAM_NAME;


INSERT ALL 
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K01', '울산현대', '울산', '45')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K02', '삼성블루윈즈', '수원', '49')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K03', '스틸러스', '포항', '49')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K04', '유나이티드', '인천', '46')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K05', '현대모터스', '전북', '51')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K06', '아이파크', '부산', '46')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K07', '드래곤즈', '전남', '51')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K08', '일화천마', '성남', '45')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K09', 'FC울울', '서울', '49')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K10', '시티즌', '대전', '36')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K11', '경남FC', '경남', '3')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K12', '광주상무', '광주', '2')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K13', '강원FC', '강원', '3')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K14', '제주유나이티드FC', '제주', '2')
	INTO TEAM_MEMBER_COUNT(TEAM_ID, TEAM_NAME, REGION_NAME, MEMBER_COUNT) VALUES('K15', '대구FC', '대구', '3')
SELECT 1 FROM DUAL;

CREATE OR REPLACE TRIGGER PLAYER_TRANSFER
	AFTER UPDATE ON TEAM_MEMBER_COUNT
	FOR EACH ROW
BEGIN
	-- 이적 이전 팀의 멤버 수 감소
	UPDATE TEAM_MEMBER_COUNT
		SET MEMBER_COUNT = MEMBER_COUNT - 1
	WHERE TEAM_ID = :OLD.TEAM_ID;
	-- 이적 이후 팀의 멤버 수 증가
	UPDATE TEAM_MEMBER_COUNT
		SET MEMBER_COUNT = MEMBER_COUNT + 1
	WHERE TEAM_ID = :NEW.TEAM_ID;
END;

ALTER TRIGGER PLAYER_TRANSFER DISABLE;
ALTER TRIGGER PLAYER_TRANSFER ENABLE;


UPDATE TEAM_MEMBER_COUNT
	SET MEMBER_COUNT = 
	CASE
		WHEN TEAM_ID = 'K03' THEN MEMBER_COUNT - 1
		WHEN TEAM_ID = 'K11' THEN MEMBER_COUNT + 1
		ELSE MEMBER_COUNT
	END
WHERE TEAM_ID IN ('K03', 'K11');

	

